{
     _id: ObjectId( "50a8240b927d5d8b5891743c" ),
     cust_id: "abc123" ,
     ord_date: new Date( "Oct 04, 2012" ),
     status: 'A' ,
     price: 25 ,
     items: [{sku: "mmm" , qty: 5 , price: 2.5 },
              {sku: "nnn" , qty: 5 , price: 2.5 }]
}

# Calculate the total amount of each customer

var mapFunction1 = function ()  {
   emit( this .cust_id, this .price);
};

var reduceFunction1 = function (keyCustId, valuesPrices)  {
   return Array.sum(valuesPrices);
};

db.orders.mapReduce(
 mapFunction1,
 reduceFunction1,
 {out: "map_reduce_example" }
)


# Calculate the total number of orders and the average value of each sku order 
var mapFunction2 = function ()  {
    for ( var idx = 0 ; idx < this .items.length; idx++) {
        var key = this .items[idx].sku ;
        var value = {
                     count: 1 ,
                     qty: this .items[idx].qty
                   };
       emit(key, value);
   }
};

var reduceFunction2 = function (keySKU, countObjVals)  {
     reducedVal = {count: 0 , qty: 0 };
      for ( var idx = 0 ; idx <countObjVals.length; idx++) {
         reducedVal.count += countObjVals[idx].count;
         reducedVal.qty += countObjVals[idx].qty;
     }
     return reducedVal;
};

var finalizeFunction2 = function  (key, reducedVal)  {
   reducedVal.avg = reducedVal.qty/reducedVal.count;
   return reducedVal;
};

db.orders.mapReduce( 
    mapFunction2,
    reduceFunction2,
     {
       out: {merge: "map_reduce_example" },
       query: {ord_date:
                  {$gt: new Date( '01/01/2012' )}
              },
       finalize: finalizeFunction2
     }
)
